//    PLUGINS
// ==============
plugins {
    id 'java'
    id 'de.undercouch.download' version '1.2'
    id 'application'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.2'
    id 'pmd'
    id 'checkstyle'
    id 'findbugs'
}

defaultTasks 'clean', 'build'

//    METADATA
// ==============
version = '3.1.0'
description = 'Osmium: Xenon Job Webservice'
mainClassName = 'nl.esciencecenter.osmium.JobLauncherService'
// will generate a warning with JDK 8, since the runtime jar (rt.jar) of
// Java 7 is not available. No optimal solution here (except? using gradle
// wrapper)
sourceCompatibility = 1.7
targetCompatibility = 1.7

// Choose Xenon 1.0.0 (from repo) or put a xenon.jar or xenon-[version].jar in
// lib/ and set that version here
def xenonVersion = '1.0.0'

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

//  DEPENDENCIES
// ==============

//Get dependencies locally, from Xenon and then from Maven central repository
repositories {
  flatDir { dirs 'lib' }
  maven { url "http://nlesc.github.io/Xenon/repo" }
  mavenCentral()
}

dependencies {
  // state all packages that are explicitly imported in Osmium,
  // even if there already is a transitive dependency
  compile group: 'com.yammer.dropwizard', name: 'dropwizard-core', version: '0.6.2', transitive: true
  compile group: 'com.yammer.dropwizard', name: 'dropwizard-client', version: '0.6.2', transitive: true
  compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.1.4'
  compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.1.4'
  compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.1.4'
  compile group: 'javax.validation', name: 'validation-api', version: '1.0.0.GA'
  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.5'
  compile group: 'commons-codec', name: 'commons-codec', version: '1.6'
  compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.2.5', transitive: true

  // Xenon dependencies. downloadJGlobus task (below) downloads
  // xenon/lib/**/*.jar to ./lib/
  compile group: 'nl.esciencecenter', name: 'xenon', version: xenonVersion
  runtime group: 'com.jcraft', name: 'jsch', version: '0.1.50'
  runtime group: 'commons-net', name: 'commons-net', version: '3.3'
  runtime group: 'com.google.code.findbugs', name: 'findbugs', version: '2.0.2'
  runtime module(group: 'org.jglobus', name: 'cog-jglobus', version: '1.8.0') {
    dependency group: 'org.jglobus', name: 'cog-jobmanager', version: '1.8.0'
    dependency group: 'org.jglobus', name: 'cog-url', version: '1.8.0'
    dependency group: 'commons-logging', name: 'commons-logging', version: '1.1'
    dependency group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.3', transitive: true
    dependency group: 'cryptix', name: 'cryptix-asn1'
    dependency group: 'cryptix', name: 'cryptix'
    dependency group: 'cryptix', name: 'cryptix32'
    dependency group: 'org.bountycastle', name: 'jce-jdk13', version: '131'
    dependency group: 'org.ietf', name: 'jgss'
    dependency group: 'com.claymoresystems', name: 'puretls', version: '0.9b4'
  }

  // Xenon runtime dependencies
  runtime group: 'ch.qos.logback', name: 'logback-core', version: '1.0.11'
  runtime group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.11'

  // Testing dependencies
  testCompile group: 'com.yammer.dropwizard', name: 'dropwizard-testing', version: '0.6.2', transitive: true
  testCompile group: 'junit', name: 'junit', version: '4.8.2'
  
  testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
  testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.1', transitive: true
  testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.1', transitive: true
  testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.5.2', transitive: true
  testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.5.2', transitive: true
  testCompile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.2.5', classifier: 'tests'
}

task downloadJGlobus(type: de.undercouch.gradle.tasks.download.Download) {
  // Globus dependencies are non-standard but already uploaded to the Xenon
  // GitHub repository. This resolution is set to a fixed commit in the
  // Xenon develop branch, to prevent expiration.
  def baseUrl = 'https://raw.github.com/NLeSC/Xenon/de9892dd92358bf69521819adfee15dc43e41ff4/lib/cog-jglobus/'
  src([
      baseUrl + 'cog-jglobus-1.8.0.jar',
      baseUrl + 'cog-jobmanager-1.8.0.jar',
      baseUrl + 'cog-url-1.8.0.jar',
      baseUrl + 'cryptix-asn1.jar',
      baseUrl + 'cryptix.jar',
      baseUrl + 'cryptix32.jar',
      baseUrl + 'jce-jdk13-131.jar',
      baseUrl + 'jgss.jar',
      baseUrl + 'puretls.jar',
    ])
  dest new File(projectDir, '/lib')
  overwrite false
}
compileJava.dependsOn downloadJGlobus

//     PACKAGE
// ==============
jar {
  manifest {
    attributes(
      'Implementation-Title': 'Osmium',
      'Implementation-Version': version,
      'Main-Class': mainClassName,
    )
  }
}

// Must be explicitly called after assemble, otherwise the runtime can't be
// configured without downloadJGlobus.
task fatJar(type: Jar) {
  manifest.from jar.manifest
  classifier = 'all'

  from {
    configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
  } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
  }
  with jar
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

//      RUN
// ==============

run {
  main = mainClassName
  description = "Osmium job launcher"
  args = ['server', 'joblauncher.yml']
}

//    CHECK
// ==============

findbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
findbugsTest {
    excludeFilter = file("$rootProject.projectDir/config/findbugs/findbugs-test-exclude-filter.xml")
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

checkstyleMain {
    ignoreFailures = true
}
task checkstyleHtml << {
    ant.xslt(in: checkstyleMain.reports.xml.destination,
             style: file("$rootProject.projectDir/config/checkstyle/checkstyle-noframes-sorted.xsl"),
             out: new File(checkstyleMain.reports.xml.destination.parent, 'main.html'))
}

checkstyleMain.finalizedBy checkstyleHtml
// Not that interested in failing checkstyle in tests
checkstyleTest.enabled = false

//     PUBLISH
// ==============
publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            groupId 'nl.esciencecenter.xenon'
            artifactId 'osmium'
            version version

            artifact sourcesJar
            artifact javadocJar
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    pkg {
      repo = 'xenon'
      name = 'osmium'
      desc = description
      userOrg = 'nlesc'
      licenses = ['Apache-2.0']
      websiteUrl = 'https://github.com/NLeSC/osmium'
      vcsUrl = 'https://github.com/NLeSC/osmium.git'
      issueTrackerUrl = 'https://github.com/NLeSC/osmium/issues'
    }
    publications = ['MyPublication']
}
